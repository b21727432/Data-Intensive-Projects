{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GokhanOzeloglu_AliKayadibi_SDSP_Project","provenance":[{"file_id":"1HddhgbUBrzYfbfBI9w_jtOwOOIBrT3hP","timestamp":1621708130855}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"yyuTIfHkb4dT"},"source":["#  BBM467 – Data Intensive Applications\n","## Short Data Science Project (SDSP) \n","**Student Names**: Gökhan Özeloğlu - 21627557 / Ali Kayadibi - 21727432\n","\n","**Instructors**: Fuat AKAL\n"]},{"cell_type":"markdown","metadata":{"id":"KP-9sA8jb_ND"},"source":["## Problem \n","\n","There are some diseases which are hard to diagnose by physicians. For instance, the disease\n","may be rare and the physician responsible has no experience on that disease whatsoever.\n","Or, there may be other diseases with similar symptoms and the physician can not make sure\n","about her/his diagnosis. Whatever the reason is, this sort of cases typically result in\n","unnecessary and expensive tests, e.g., blood work, x-rays, MRIs, etc. Besides wasting\n","valuable resources, putting patients into distressing situations is also an issue. Therefore,\n","diagnosing a disease by using resources optimally and without sacrifing the healthcare\n","quality is of great importance.\n"]},{"cell_type":"markdown","metadata":{"id":"gYssh9vAbKKW"},"source":["## Data Understanding\n","\n","---\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QpK4ORAT0LfM","executionInfo":{"status":"ok","timestamp":1621945145091,"user_tz":-180,"elapsed":372,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"2237d272-af1d-4199-edf8-20c230307915"},"source":["# Import libraries\n","import pandas as pd\n","import numpy as np\n","\n","df = pd.read_excel(\"sdsp_patients.xlsx\")\n","print(df)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["       Disease Feature_1  Feature_2  ... Feature_48  Feature_49  Feature_50\n","0    Disease_1      Male       28.0  ...         No          No          No\n","1    Disease_1      Male       18.0  ...         No          No          No\n","2    Disease_1      Male       44.0  ...         No          No          No\n","3    Disease_1      Male       19.0  ...         No          No          No\n","4    Disease_1      Male       17.5  ...         No         Yes          No\n","..         ...       ...        ...  ...        ...         ...         ...\n","395  Disease_1    Female       36.0  ...         No          No          No\n","396  Disease_1      Male       60.0  ...         No          No          No\n","397  Disease_1    Female       41.0  ...         No          No          No\n","398  Disease_1      Male       37.0  ...         No          No          No\n","399  Disease_1      Male       30.0  ...         No          No          No\n","\n","[400 rows x 51 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SvJEDyHKsXXw","executionInfo":{"status":"ok","timestamp":1621945145351,"user_tz":-180,"elapsed":30,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"747f2674-36b0-4410-b00f-8d74a2f3872a"},"source":["print(\"Dataframe shape:\", df.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Dataframe shape: (400, 51)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Olrafb67bP_E"},"source":["Our dataset consists of 400 rows and 51 columns.The first column is actually target column. If we don't count that column there are 50 features.\n","\n","After loading the data, lets take a look at the features of the data."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":258},"id":"4KZSXPy21kv8","executionInfo":{"status":"ok","timestamp":1621945145833,"user_tz":-180,"elapsed":493,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"fef81c33-1fa8-4a66-f6b3-61ad4fa0b00e"},"source":["df = pd.DataFrame(df)\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Disease</th>\n","      <th>Feature_1</th>\n","      <th>Feature_2</th>\n","      <th>Feature_3</th>\n","      <th>Feature_4</th>\n","      <th>Feature_5</th>\n","      <th>Feature_6</th>\n","      <th>Feature_7</th>\n","      <th>Feature_8</th>\n","      <th>Feature_9</th>\n","      <th>Feature_10</th>\n","      <th>Feature_11</th>\n","      <th>Feature_12</th>\n","      <th>Feature_13</th>\n","      <th>Feature_14</th>\n","      <th>Feature_15</th>\n","      <th>Feature_16</th>\n","      <th>Feature_17</th>\n","      <th>Feature_18</th>\n","      <th>Feature_19</th>\n","      <th>Feature_20</th>\n","      <th>Feature_21</th>\n","      <th>Feature_22</th>\n","      <th>Feature_23</th>\n","      <th>Feature_24</th>\n","      <th>Feature_25</th>\n","      <th>Feature_26</th>\n","      <th>Feature_27</th>\n","      <th>Feature_28</th>\n","      <th>Feature_29</th>\n","      <th>Feature_30</th>\n","      <th>Feature_31</th>\n","      <th>Feature_32</th>\n","      <th>Feature_33</th>\n","      <th>Feature_34</th>\n","      <th>Feature_35</th>\n","      <th>Feature_36</th>\n","      <th>Feature_37</th>\n","      <th>Feature_38</th>\n","      <th>Feature_39</th>\n","      <th>Feature_40</th>\n","      <th>Feature_41</th>\n","      <th>Feature_42</th>\n","      <th>Feature_43</th>\n","      <th>Feature_44</th>\n","      <th>Feature_45</th>\n","      <th>Feature_46</th>\n","      <th>Feature_47</th>\n","      <th>Feature_48</th>\n","      <th>Feature_49</th>\n","      <th>Feature_50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>28.0</td>\n","      <td>130</td>\n","      <td>96.0</td>\n","      <td>2.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>18.0</td>\n","      <td>95</td>\n","      <td>46.0</td>\n","      <td>3.0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>44.0</td>\n","      <td>152</td>\n","      <td>150.0</td>\n","      <td>1.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>19.0</td>\n","      <td>112</td>\n","      <td>66.0</td>\n","      <td>18.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>17.5</td>\n","      <td>105.5</td>\n","      <td>54.0</td>\n","      <td>3.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Disease Feature_1  Feature_2  ... Feature_48  Feature_49  Feature_50\n","0  Disease_1      Male       28.0  ...         No          No          No\n","1  Disease_1      Male       18.0  ...         No          No          No\n","2  Disease_1      Male       44.0  ...         No          No          No\n","3  Disease_1      Male       19.0  ...         No          No          No\n","4  Disease_1      Male       17.5  ...         No         Yes          No\n","\n","[5 rows x 51 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"CPMwZV1Zbbkw"},"source":["Due to privacy\n","reasons, predictor variables (features) are named as Feature_X and the target variable (class\n","name) is named as Disease. The target column may have values like Disease_Y. Here, X and Y\n","are integers\n","\n","There are some objects types in our data. Lets get the unique values of these columns so we can encode later."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h7wn2Kcq_BF0","executionInfo":{"status":"ok","timestamp":1621945145836,"user_tz":-180,"elapsed":121,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"5f1becab-6c79-4453-c244-0e3f80eb00cb"},"source":["df[\"Disease\"].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Disease_1    244\n","Disease_3     78\n","Disease_2     52\n","Disease_4     26\n","Name: Disease, dtype: int64"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":406},"id":"qVbxzsXx8M6t","executionInfo":{"status":"ok","timestamp":1621945145839,"user_tz":-180,"elapsed":108,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"8fdf9722-c0ec-4043-a6b7-d8a0589be3fd"},"source":["import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(8,6))\n","plt.bar([\"Disease_1\", \"Disease_3\", \"Disease_2\", \"Disease_4\"], [df[\"Disease\"].value_counts()[0], df[\"Disease\"].value_counts()[1], df[\"Disease\"].value_counts()[2], df[\"Disease\"].value_counts()[3]], width=.45, color=[plt.cm.plasma(i*70) for i in range(1, 10)])\n","plt.title(\"Diseases - Class Distribution\")\n","plt.xlabel(\"Disease_1 - Disease_3 - Disease_2 - Disease_4\")\n","plt.ylabel(\"Count\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-uyYTUvUbigM","executionInfo":{"status":"ok","timestamp":1621945145841,"user_tz":-180,"elapsed":106,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"bfbab60c-cd78-42e0-d240-358a716a677a"},"source":["df[\"Feature_28\"].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Every Day           205\n","1-2 Days a Week      69\n","1-2 Days a Month     65\n","3-4 Days a Week      60\n","Name: Feature_28, dtype: int64"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":404},"id":"BhV0eep48if9","executionInfo":{"status":"ok","timestamp":1621945146193,"user_tz":-180,"elapsed":447,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"73639240-a63b-4252-8880-b52c4d571baf"},"source":["plt.figure(figsize=(8,6))\n","plt.bar([\"Every Day\", \"1-2 Days a Week\", \"1-2 Days a Month\", \"3-4 Days a Week\"], [df[\"Feature_28\"].value_counts()[0], df[\"Feature_28\"].value_counts()[1], df[\"Feature_28\"].value_counts()[2], df[\"Feature_28\"].value_counts()[3]], width=.45, color=[plt.cm.plasma(i*70) for i in range(1, 10)])\n","plt.title(\"Frequency - Class Distribution\")\n","plt.xlabel(\"Every Day - 1-2 Days a Week - 1-2 Days a Month - 3-4 Days a Week\")\n","plt.ylabel(\"Count\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"euhx7Brcblaj","executionInfo":{"status":"ok","timestamp":1621945146206,"user_tz":-180,"elapsed":62,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"4df2e699-ca0c-41ee-d540-f5ff1fddcb4f"},"source":["df[\"Feature_29\"].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Evenings         197\n","No Difference    112\n","Mornings          91\n","Name: Feature_29, dtype: int64"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":404},"id":"D67oMSK09CVg","executionInfo":{"status":"ok","timestamp":1621945146919,"user_tz":-180,"elapsed":754,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"a61fad33-fa6f-4f50-e5a9-e78312c894ba"},"source":["plt.figure(figsize=(8,6))\n","plt.bar([\"Evenings\", \"No Difference\", \"Mornings\"], [df[\"Feature_29\"].value_counts()[0], df[\"Feature_29\"].value_counts()[1], df[\"Feature_29\"].value_counts()[2]], width=.45, color=[plt.cm.plasma(i*70) for i in range(1, 10)])\n","plt.title(\"Frequency - Class Distribution\")\n","plt.xlabel(\"Evenings - No Difference - Mornings\")\n","plt.ylabel(\"Count\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":251},"id":"me2mBRgx9khE","executionInfo":{"status":"ok","timestamp":1621945146922,"user_tz":-180,"elapsed":86,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"428eab83-423b-4fc3-d771-5e90a6c7a1b0"},"source":["N = df[\"Disease\"].value_counts()[0] + df[\"Disease\"].value_counts()[1] + df[\"Disease\"].value_counts()[2] + df[\"Disease\"].value_counts()[3]\n","fig1, ax1 = plt.subplots()\n","ax1.pie([df[\"Disease\"].value_counts()[0]/N, df[\"Disease\"].value_counts()[1]/N, df[\"Disease\"].value_counts()[2]/N, df[\"Disease\"].value_counts()[3]/N], labels=[\"Disease_1\", \"Disease_3\", \"Disease_2\", \"Disease_4\"], explode=(0.1, 0.1, 0.1, 0.1), autopct='%1.1f%%', shadow=True, startangle=90)\n","ax1.axis('equal')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"Z2CyPPjbbrEi"},"source":["These are the unique values of object type columns in our data. We also have information about gender(male/female), numerical columns and yes/no values.\n","\n","Lets see the describe of numerical columns in our dataset such as mean count std min etc..."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"1DMYaq2r_O79","executionInfo":{"status":"ok","timestamp":1621945146924,"user_tz":-180,"elapsed":81,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"e29568cc-b8ae-464c-91af-6a9caa75129b"},"source":["df.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature_2</th>\n","      <th>Feature_4</th>\n","      <th>Feature_5</th>\n","      <th>Feature_44</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>29.410125</td>\n","      <td>108.104000</td>\n","      <td>23.038050</td>\n","      <td>0.457500</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>14.350309</td>\n","      <td>49.526425</td>\n","      <td>24.742478</td>\n","      <td>1.547314</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>10.000000</td>\n","      <td>12.000000</td>\n","      <td>0.060000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>18.000000</td>\n","      <td>64.500000</td>\n","      <td>6.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>25.525000</td>\n","      <td>108.000000</td>\n","      <td>12.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>38.000000</td>\n","      <td>144.000000</td>\n","      <td>36.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>90.000000</td>\n","      <td>213.000000</td>\n","      <td>168.000000</td>\n","      <td>9.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Feature_2   Feature_4   Feature_5  Feature_44\n","count  400.000000  400.000000  400.000000  400.000000\n","mean    29.410125  108.104000   23.038050    0.457500\n","std     14.350309   49.526425   24.742478    1.547314\n","min     10.000000   12.000000    0.060000    0.000000\n","25%     18.000000   64.500000    6.000000    0.000000\n","50%     25.525000  108.000000   12.000000    0.000000\n","75%     38.000000  144.000000   36.000000    0.000000\n","max     90.000000  213.000000  168.000000    9.000000"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d4TV2M5N0bb2","executionInfo":{"status":"ok","timestamp":1621945146926,"user_tz":-180,"elapsed":78,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"3ed9d97a-2000-49fa-e6f2-2c8cbf06163f"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 400 entries, 0 to 399\n","Data columns (total 51 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Disease     400 non-null    object \n"," 1   Feature_1   400 non-null    object \n"," 2   Feature_2   400 non-null    float64\n"," 3   Feature_3   400 non-null    object \n"," 4   Feature_4   400 non-null    float64\n"," 5   Feature_5   400 non-null    float64\n"," 6   Feature_6   400 non-null    object \n"," 7   Feature_7   400 non-null    object \n"," 8   Feature_8   400 non-null    object \n"," 9   Feature_9   400 non-null    object \n"," 10  Feature_10  400 non-null    object \n"," 11  Feature_11  400 non-null    object \n"," 12  Feature_12  400 non-null    object \n"," 13  Feature_13  400 non-null    object \n"," 14  Feature_14  400 non-null    object \n"," 15  Feature_15  400 non-null    object \n"," 16  Feature_16  400 non-null    object \n"," 17  Feature_17  400 non-null    object \n"," 18  Feature_18  400 non-null    object \n"," 19  Feature_19  400 non-null    object \n"," 20  Feature_20  400 non-null    object \n"," 21  Feature_21  400 non-null    object \n"," 22  Feature_22  400 non-null    object \n"," 23  Feature_23  400 non-null    object \n"," 24  Feature_24  400 non-null    object \n"," 25  Feature_25  400 non-null    object \n"," 26  Feature_26  400 non-null    object \n"," 27  Feature_27  400 non-null    object \n"," 28  Feature_28  399 non-null    object \n"," 29  Feature_29  400 non-null    object \n"," 30  Feature_30  400 non-null    object \n"," 31  Feature_31  400 non-null    object \n"," 32  Feature_32  384 non-null    object \n"," 33  Feature_33  388 non-null    object \n"," 34  Feature_34  400 non-null    object \n"," 35  Feature_35  357 non-null    object \n"," 36  Feature_36  141 non-null    object \n"," 37  Feature_37  400 non-null    object \n"," 38  Feature_38  400 non-null    object \n"," 39  Feature_39  400 non-null    object \n"," 40  Feature_40  400 non-null    object \n"," 41  Feature_41  400 non-null    object \n"," 42  Feature_42  400 non-null    object \n"," 43  Feature_43  400 non-null    object \n"," 44  Feature_44  400 non-null    int64  \n"," 45  Feature_45  400 non-null    object \n"," 46  Feature_46  400 non-null    object \n"," 47  Feature_47  400 non-null    object \n"," 48  Feature_48  400 non-null    object \n"," 49  Feature_49  400 non-null    object \n"," 50  Feature_50  400 non-null    object \n","dtypes: float64(3), int64(1), object(47)\n","memory usage: 159.5+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eFxybdx8f96S","executionInfo":{"status":"ok","timestamp":1621945146930,"user_tz":-180,"elapsed":64,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"f44193f5-364e-45fb-b0af-5f2ca248475b"},"source":["df.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Disease         0\n","Feature_1       0\n","Feature_2       0\n","Feature_3       0\n","Feature_4       0\n","Feature_5       0\n","Feature_6       0\n","Feature_7       0\n","Feature_8       0\n","Feature_9       0\n","Feature_10      0\n","Feature_11      0\n","Feature_12      0\n","Feature_13      0\n","Feature_14      0\n","Feature_15      0\n","Feature_16      0\n","Feature_17      0\n","Feature_18      0\n","Feature_19      0\n","Feature_20      0\n","Feature_21      0\n","Feature_22      0\n","Feature_23      0\n","Feature_24      0\n","Feature_25      0\n","Feature_26      0\n","Feature_27      0\n","Feature_28      1\n","Feature_29      0\n","Feature_30      0\n","Feature_31      0\n","Feature_32     16\n","Feature_33     12\n","Feature_34      0\n","Feature_35     43\n","Feature_36    259\n","Feature_37      0\n","Feature_38      0\n","Feature_39      0\n","Feature_40      0\n","Feature_41      0\n","Feature_42      0\n","Feature_43      0\n","Feature_44      0\n","Feature_45      0\n","Feature_46      0\n","Feature_47      0\n","Feature_48      0\n","Feature_49      0\n","Feature_50      0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"6EXiXPy7zVD-"},"source":["As we can see from above table, we have missing values in some of the columns. So before training a model we must fill these missing values or drop the column if necessary.\n","\n","We have decided that if a column has more than %25 of it's values empty, we have decided to drop that column. By using the code in the below cell, we are dynamically dropping the columns if they are %25 percent empty. We believe that if a column is that empty, after replacing the values that column will have little effect to our model."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":541},"id":"xcaUf8eD1AOd","executionInfo":{"status":"ok","timestamp":1621945147585,"user_tz":-180,"elapsed":707,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"52dea057-1968-42ff-8c37-948d10dc9e3a"},"source":["threshold = 0.25\n","x = df.isnull().sum()\n","\n","cleaned_df = pd.DataFrame()\n","\n","for col, i in zip(df.columns, x):\n","  if(i > len(df)*threshold):\n","    cleaned_df = df.drop(col, axis = 1)\n","cleaned_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Disease</th>\n","      <th>Feature_1</th>\n","      <th>Feature_2</th>\n","      <th>Feature_3</th>\n","      <th>Feature_4</th>\n","      <th>Feature_5</th>\n","      <th>Feature_6</th>\n","      <th>Feature_7</th>\n","      <th>Feature_8</th>\n","      <th>Feature_9</th>\n","      <th>Feature_10</th>\n","      <th>Feature_11</th>\n","      <th>Feature_12</th>\n","      <th>Feature_13</th>\n","      <th>Feature_14</th>\n","      <th>Feature_15</th>\n","      <th>Feature_16</th>\n","      <th>Feature_17</th>\n","      <th>Feature_18</th>\n","      <th>Feature_19</th>\n","      <th>Feature_20</th>\n","      <th>Feature_21</th>\n","      <th>Feature_22</th>\n","      <th>Feature_23</th>\n","      <th>Feature_24</th>\n","      <th>Feature_25</th>\n","      <th>Feature_26</th>\n","      <th>Feature_27</th>\n","      <th>Feature_28</th>\n","      <th>Feature_29</th>\n","      <th>Feature_30</th>\n","      <th>Feature_31</th>\n","      <th>Feature_32</th>\n","      <th>Feature_33</th>\n","      <th>Feature_34</th>\n","      <th>Feature_35</th>\n","      <th>Feature_37</th>\n","      <th>Feature_38</th>\n","      <th>Feature_39</th>\n","      <th>Feature_40</th>\n","      <th>Feature_41</th>\n","      <th>Feature_42</th>\n","      <th>Feature_43</th>\n","      <th>Feature_44</th>\n","      <th>Feature_45</th>\n","      <th>Feature_46</th>\n","      <th>Feature_47</th>\n","      <th>Feature_48</th>\n","      <th>Feature_49</th>\n","      <th>Feature_50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>28.0</td>\n","      <td>130</td>\n","      <td>96.0</td>\n","      <td>2.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>18.0</td>\n","      <td>95</td>\n","      <td>46.0</td>\n","      <td>3.0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>44.0</td>\n","      <td>152</td>\n","      <td>150.0</td>\n","      <td>1.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>19.0</td>\n","      <td>112</td>\n","      <td>66.0</td>\n","      <td>18.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>17.5</td>\n","      <td>105.5</td>\n","      <td>54.0</td>\n","      <td>3.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>395</th>\n","      <td>Disease_1</td>\n","      <td>Female</td>\n","      <td>36.0</td>\n","      <td>142</td>\n","      <td>144.0</td>\n","      <td>24.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>3-4 Days a Week</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>8</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>396</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>60.0</td>\n","      <td>172</td>\n","      <td>165.0</td>\n","      <td>120.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>9</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>397</th>\n","      <td>Disease_1</td>\n","      <td>Female</td>\n","      <td>41.0</td>\n","      <td>147</td>\n","      <td>156.0</td>\n","      <td>60.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>3-4 Days a Week</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>9</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>398</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>37.0</td>\n","      <td>138</td>\n","      <td>144.0</td>\n","      <td>120.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>3-4 Days a Week</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>9</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>399</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>30.0</td>\n","      <td>130</td>\n","      <td>108.0</td>\n","      <td>6.0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>1-2 Days a Month</td>\n","      <td>No Difference</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>9</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>400 rows × 50 columns</p>\n","</div>"],"text/plain":["       Disease Feature_1  Feature_2  ... Feature_48  Feature_49  Feature_50\n","0    Disease_1      Male       28.0  ...         No          No          No\n","1    Disease_1      Male       18.0  ...         No          No          No\n","2    Disease_1      Male       44.0  ...         No          No          No\n","3    Disease_1      Male       19.0  ...         No          No          No\n","4    Disease_1      Male       17.5  ...         No         Yes          No\n","..         ...       ...        ...  ...        ...         ...         ...\n","395  Disease_1    Female       36.0  ...         No          No          No\n","396  Disease_1      Male       60.0  ...         No          No          No\n","397  Disease_1    Female       41.0  ...         No          No          No\n","398  Disease_1      Male       37.0  ...         No          No          No\n","399  Disease_1      Male       30.0  ...         No          No          No\n","\n","[400 rows x 50 columns]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"IK9tcWyBemve"},"source":["Here are the columns that have less than threshold missing value."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":258},"id":"G_sZ116N3wOl","executionInfo":{"status":"ok","timestamp":1621945147589,"user_tz":-180,"elapsed":281,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"303703aa-3428-41d1-8923-53fb87102716"},"source":["cleaned_df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Disease</th>\n","      <th>Feature_1</th>\n","      <th>Feature_2</th>\n","      <th>Feature_3</th>\n","      <th>Feature_4</th>\n","      <th>Feature_5</th>\n","      <th>Feature_6</th>\n","      <th>Feature_7</th>\n","      <th>Feature_8</th>\n","      <th>Feature_9</th>\n","      <th>Feature_10</th>\n","      <th>Feature_11</th>\n","      <th>Feature_12</th>\n","      <th>Feature_13</th>\n","      <th>Feature_14</th>\n","      <th>Feature_15</th>\n","      <th>Feature_16</th>\n","      <th>Feature_17</th>\n","      <th>Feature_18</th>\n","      <th>Feature_19</th>\n","      <th>Feature_20</th>\n","      <th>Feature_21</th>\n","      <th>Feature_22</th>\n","      <th>Feature_23</th>\n","      <th>Feature_24</th>\n","      <th>Feature_25</th>\n","      <th>Feature_26</th>\n","      <th>Feature_27</th>\n","      <th>Feature_28</th>\n","      <th>Feature_29</th>\n","      <th>Feature_30</th>\n","      <th>Feature_31</th>\n","      <th>Feature_32</th>\n","      <th>Feature_33</th>\n","      <th>Feature_34</th>\n","      <th>Feature_35</th>\n","      <th>Feature_37</th>\n","      <th>Feature_38</th>\n","      <th>Feature_39</th>\n","      <th>Feature_40</th>\n","      <th>Feature_41</th>\n","      <th>Feature_42</th>\n","      <th>Feature_43</th>\n","      <th>Feature_44</th>\n","      <th>Feature_45</th>\n","      <th>Feature_46</th>\n","      <th>Feature_47</th>\n","      <th>Feature_48</th>\n","      <th>Feature_49</th>\n","      <th>Feature_50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>28.0</td>\n","      <td>130</td>\n","      <td>96.0</td>\n","      <td>2.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>18.0</td>\n","      <td>95</td>\n","      <td>46.0</td>\n","      <td>3.0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>44.0</td>\n","      <td>152</td>\n","      <td>150.0</td>\n","      <td>1.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>19.0</td>\n","      <td>112</td>\n","      <td>66.0</td>\n","      <td>18.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>17.5</td>\n","      <td>105.5</td>\n","      <td>54.0</td>\n","      <td>3.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Disease Feature_1  Feature_2  ... Feature_48  Feature_49  Feature_50\n","0  Disease_1      Male       28.0  ...         No          No          No\n","1  Disease_1      Male       18.0  ...         No          No          No\n","2  Disease_1      Male       44.0  ...         No          No          No\n","3  Disease_1      Male       19.0  ...         No          No          No\n","4  Disease_1      Male       17.5  ...         No         Yes          No\n","\n","[5 rows x 50 columns]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"raRWVTWgetDP"},"source":["Now we will fill the missing values our columns have. We have object columns and numerical columns in our data so we must fill these two different types seperatly. At first we replace empty spaces with mean or mode, than if the missing value count is bigger than zero and if the column is object type we replace the Nan's with mean of that column because it means that this column is float or integer, if column type is object we replace Nan's with the most common string which is mode of that column."]},{"cell_type":"code","metadata":{"id":"cpfxudBL31TD"},"source":["for c, t in zip(cleaned_df.columns, cleaned_df.dtypes):\n","  if(t != \"object\"):\n","    cleaned_df[c].replace(\" \", cleaned_df[c].mean(), inplace=True)\n","  else:\n","    cleaned_df[c].replace(\" \", cleaned_df[c].mode()[0], inplace=True) \n","  if cleaned_df[c].isnull().sum() > 0:\n","    if(t != \"object\"): # int ya da float\n","      cleaned_df[c].replace(np.NaN, cleaned_df[c].mean(), inplace=True)\n","    else: # string\n","      cleaned_df[c].replace(np.NaN, cleaned_df[c].mode()[0], inplace=True)\n","        # Replace the NaN values with the most occurrence ones"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KxPXWwyGfhxc"},"source":["Now lets check if we still have missing values."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LGoAb1_Z4oBF","executionInfo":{"status":"ok","timestamp":1621945147596,"user_tz":-180,"elapsed":282,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"3e07ecec-569a-4b40-a2c0-856741e3a8f8"},"source":["cleaned_df.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Disease       0\n","Feature_1     0\n","Feature_2     0\n","Feature_3     0\n","Feature_4     0\n","Feature_5     0\n","Feature_6     0\n","Feature_7     0\n","Feature_8     0\n","Feature_9     0\n","Feature_10    0\n","Feature_11    0\n","Feature_12    0\n","Feature_13    0\n","Feature_14    0\n","Feature_15    0\n","Feature_16    0\n","Feature_17    0\n","Feature_18    0\n","Feature_19    0\n","Feature_20    0\n","Feature_21    0\n","Feature_22    0\n","Feature_23    0\n","Feature_24    0\n","Feature_25    0\n","Feature_26    0\n","Feature_27    0\n","Feature_28    0\n","Feature_29    0\n","Feature_30    0\n","Feature_31    0\n","Feature_32    0\n","Feature_33    0\n","Feature_34    0\n","Feature_35    0\n","Feature_37    0\n","Feature_38    0\n","Feature_39    0\n","Feature_40    0\n","Feature_41    0\n","Feature_42    0\n","Feature_43    0\n","Feature_44    0\n","Feature_45    0\n","Feature_46    0\n","Feature_47    0\n","Feature_48    0\n","Feature_49    0\n","Feature_50    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"RInXQxT4flo0"},"source":["As we see we have cleared the missing values dynamically."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iB8WYFfbEb4K","executionInfo":{"status":"ok","timestamp":1621945147599,"user_tz":-180,"elapsed":258,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"c8dac273-8694-4ca8-8dd0-a107a0b54ff0"},"source":["cleaned_df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 400 entries, 0 to 399\n","Data columns (total 50 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Disease     400 non-null    object \n"," 1   Feature_1   400 non-null    object \n"," 2   Feature_2   400 non-null    float64\n"," 3   Feature_3   400 non-null    float64\n"," 4   Feature_4   400 non-null    float64\n"," 5   Feature_5   400 non-null    float64\n"," 6   Feature_6   400 non-null    object \n"," 7   Feature_7   400 non-null    object \n"," 8   Feature_8   400 non-null    object \n"," 9   Feature_9   400 non-null    object \n"," 10  Feature_10  400 non-null    object \n"," 11  Feature_11  400 non-null    object \n"," 12  Feature_12  400 non-null    object \n"," 13  Feature_13  400 non-null    object \n"," 14  Feature_14  400 non-null    object \n"," 15  Feature_15  400 non-null    object \n"," 16  Feature_16  400 non-null    object \n"," 17  Feature_17  400 non-null    object \n"," 18  Feature_18  400 non-null    object \n"," 19  Feature_19  400 non-null    object \n"," 20  Feature_20  400 non-null    object \n"," 21  Feature_21  400 non-null    object \n"," 22  Feature_22  400 non-null    object \n"," 23  Feature_23  400 non-null    object \n"," 24  Feature_24  400 non-null    object \n"," 25  Feature_25  400 non-null    object \n"," 26  Feature_26  400 non-null    object \n"," 27  Feature_27  400 non-null    object \n"," 28  Feature_28  400 non-null    object \n"," 29  Feature_29  400 non-null    object \n"," 30  Feature_30  400 non-null    object \n"," 31  Feature_31  400 non-null    object \n"," 32  Feature_32  400 non-null    object \n"," 33  Feature_33  400 non-null    object \n"," 34  Feature_34  400 non-null    object \n"," 35  Feature_35  400 non-null    object \n"," 36  Feature_37  400 non-null    object \n"," 37  Feature_38  400 non-null    object \n"," 38  Feature_39  400 non-null    object \n"," 39  Feature_40  400 non-null    object \n"," 40  Feature_41  400 non-null    object \n"," 41  Feature_42  400 non-null    object \n"," 42  Feature_43  400 non-null    object \n"," 43  Feature_44  400 non-null    int64  \n"," 44  Feature_45  400 non-null    object \n"," 45  Feature_46  400 non-null    object \n"," 46  Feature_47  400 non-null    object \n"," 47  Feature_48  400 non-null    object \n"," 48  Feature_49  400 non-null    object \n"," 49  Feature_50  400 non-null    object \n","dtypes: float64(4), int64(1), object(45)\n","memory usage: 156.4+ KB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bblz0-U7fqr0"},"source":["Now we will seperate numerical columns and categorical columns. The reason why we do this is we want to normalize the numerical values to decrease the effects of outliers and scale the values between [0 1]."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xkpN23qmFYwe","executionInfo":{"status":"ok","timestamp":1621945147609,"user_tz":-180,"elapsed":153,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"0caab0d3-2ca7-4ce6-b776-27b50668ac1c"},"source":["noncategoricalfeaturelist = []\n","for c, t in zip(cleaned_df.columns, cleaned_df.dtypes):\n","  if(t != \"object\"):\n","      noncategoricalfeaturelist.append(c)\n","noncategoricalfeaturelist"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Feature_2', 'Feature_3', 'Feature_4', 'Feature_5', 'Feature_44']"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"vl-nxqOigBVU"},"source":["Now we create a empty dictionary and we are adding the feature name as key and possible values of that column as value in this dictionary. The reason why we do this is we will use these possible values in the front end side of our project. To show dynamically, we are saving the all possible values of features in this dictionary."]},{"cell_type":"code","metadata":{"id":"y-GwL_cwCwi0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621945147616,"user_tz":-180,"elapsed":136,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"6e96ef83-fdc1-400f-c763-fde90f43447b"},"source":["features_dict = dict()\n","\n","for c, t in zip(cleaned_df.columns, cleaned_df.dtypes):\n","    if(t == object):\n","      features_dict[c] = pd.unique(cleaned_df[c])\n","print(features_dict)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'Disease': array(['Disease_1', 'Disease_2', 'Disease_3', 'Disease_4'], dtype=object), 'Feature_1': array(['Male', 'Female'], dtype=object), 'Feature_6': array(['No', 'Yes'], dtype=object), 'Feature_7': array(['Yes', 'No'], dtype=object), 'Feature_8': array(['Yes', 'No'], dtype=object), 'Feature_9': array(['No', 'Yes'], dtype=object), 'Feature_10': array(['No', 'Yes'], dtype=object), 'Feature_11': array(['No', 'Yes'], dtype=object), 'Feature_12': array(['No', 'Yes'], dtype=object), 'Feature_13': array(['No', 'Yes'], dtype=object), 'Feature_14': array(['No', 'Yes'], dtype=object), 'Feature_15': array(['No', 'Yes'], dtype=object), 'Feature_16': array(['No'], dtype=object), 'Feature_17': array(['No', 'Yes'], dtype=object), 'Feature_18': array(['No', 'Yes'], dtype=object), 'Feature_19': array(['No'], dtype=object), 'Feature_20': array(['No', 'Yes'], dtype=object), 'Feature_21': array(['No', 'Yes'], dtype=object), 'Feature_22': array(['No', 'Yes'], dtype=object), 'Feature_23': array(['No', 'Yes'], dtype=object), 'Feature_24': array(['No', 'Yes'], dtype=object), 'Feature_25': array(['No'], dtype=object), 'Feature_26': array(['No', 'Yes'], dtype=object), 'Feature_27': array(['No', 'Yes'], dtype=object), 'Feature_28': array(['Every Day', '1-2 Days a Week', '3-4 Days a Week',\n","       '1-2 Days a Month'], dtype=object), 'Feature_29': array(['No Difference', 'Evenings', 'Mornings'], dtype=object), 'Feature_30': array(['No', 'Yes'], dtype=object), 'Feature_31': array(['Yes', 'No'], dtype=object), 'Feature_32': array(['Yes', 'No'], dtype=object), 'Feature_33': array(['No', 'Yes'], dtype=object), 'Feature_34': array(['No', 'Yes'], dtype=object), 'Feature_35': array(['No', 'Yes'], dtype=object), 'Feature_37': array(['No', 'Yes'], dtype=object), 'Feature_38': array(['No', 'Yes'], dtype=object), 'Feature_39': array(['No', 'Yes'], dtype=object), 'Feature_40': array(['No', 'Yes'], dtype=object), 'Feature_41': array(['No', 'Yes'], dtype=object), 'Feature_42': array(['No', 'Yes'], dtype=object), 'Feature_43': array(['No', 'Yes'], dtype=object), 'Feature_45': array(['No', 'Yes'], dtype=object), 'Feature_46': array(['No', 'Yes'], dtype=object), 'Feature_47': array(['No', 'Yes'], dtype=object), 'Feature_48': array(['No', 'Yes'], dtype=object), 'Feature_49': array(['No', 'Yes'], dtype=object), 'Feature_50': array(['No', 'Yes'], dtype=object)}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UkdF-erEgrBF"},"source":["Now we are using one hot encoding to encode the object values in our dataset to convert them into integer values so that we can use them in machine learning models."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"1UPvJEmwYZrs","executionInfo":{"status":"ok","timestamp":1621945147617,"user_tz":-180,"elapsed":124,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"47bc442f-663c-467b-d208-c721b162dd92"},"source":["onehot = pd.get_dummies(cleaned_df)\n","onehot.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature_2</th>\n","      <th>Feature_3</th>\n","      <th>Feature_4</th>\n","      <th>Feature_5</th>\n","      <th>Feature_44</th>\n","      <th>Disease_Disease_1</th>\n","      <th>Disease_Disease_2</th>\n","      <th>Disease_Disease_3</th>\n","      <th>Disease_Disease_4</th>\n","      <th>Feature_1_Female</th>\n","      <th>Feature_1_Male</th>\n","      <th>Feature_6_No</th>\n","      <th>Feature_6_Yes</th>\n","      <th>Feature_7_No</th>\n","      <th>Feature_7_Yes</th>\n","      <th>Feature_8_No</th>\n","      <th>Feature_8_Yes</th>\n","      <th>Feature_9_No</th>\n","      <th>Feature_9_Yes</th>\n","      <th>Feature_10_No</th>\n","      <th>Feature_10_Yes</th>\n","      <th>Feature_11_No</th>\n","      <th>Feature_11_Yes</th>\n","      <th>Feature_12_No</th>\n","      <th>Feature_12_Yes</th>\n","      <th>Feature_13_No</th>\n","      <th>Feature_13_Yes</th>\n","      <th>Feature_14_No</th>\n","      <th>Feature_14_Yes</th>\n","      <th>Feature_15_No</th>\n","      <th>Feature_15_Yes</th>\n","      <th>Feature_16_No</th>\n","      <th>Feature_17_No</th>\n","      <th>Feature_17_Yes</th>\n","      <th>Feature_18_No</th>\n","      <th>Feature_18_Yes</th>\n","      <th>Feature_19_No</th>\n","      <th>Feature_20_No</th>\n","      <th>Feature_20_Yes</th>\n","      <th>Feature_21_No</th>\n","      <th>...</th>\n","      <th>Feature_29_Mornings</th>\n","      <th>Feature_29_No Difference</th>\n","      <th>Feature_30_No</th>\n","      <th>Feature_30_Yes</th>\n","      <th>Feature_31_No</th>\n","      <th>Feature_31_Yes</th>\n","      <th>Feature_32_No</th>\n","      <th>Feature_32_Yes</th>\n","      <th>Feature_33_No</th>\n","      <th>Feature_33_Yes</th>\n","      <th>Feature_34_No</th>\n","      <th>Feature_34_Yes</th>\n","      <th>Feature_35_No</th>\n","      <th>Feature_35_Yes</th>\n","      <th>Feature_37_No</th>\n","      <th>Feature_37_Yes</th>\n","      <th>Feature_38_No</th>\n","      <th>Feature_38_Yes</th>\n","      <th>Feature_39_No</th>\n","      <th>Feature_39_Yes</th>\n","      <th>Feature_40_No</th>\n","      <th>Feature_40_Yes</th>\n","      <th>Feature_41_No</th>\n","      <th>Feature_41_Yes</th>\n","      <th>Feature_42_No</th>\n","      <th>Feature_42_Yes</th>\n","      <th>Feature_43_No</th>\n","      <th>Feature_43_Yes</th>\n","      <th>Feature_45_No</th>\n","      <th>Feature_45_Yes</th>\n","      <th>Feature_46_No</th>\n","      <th>Feature_46_Yes</th>\n","      <th>Feature_47_No</th>\n","      <th>Feature_47_Yes</th>\n","      <th>Feature_48_No</th>\n","      <th>Feature_48_Yes</th>\n","      <th>Feature_49_No</th>\n","      <th>Feature_49_Yes</th>\n","      <th>Feature_50_No</th>\n","      <th>Feature_50_Yes</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>28.0</td>\n","      <td>130.0</td>\n","      <td>96.0</td>\n","      <td>2.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18.0</td>\n","      <td>95.0</td>\n","      <td>46.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>44.0</td>\n","      <td>152.0</td>\n","      <td>150.0</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>19.0</td>\n","      <td>112.0</td>\n","      <td>66.0</td>\n","      <td>18.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>17.5</td>\n","      <td>105.5</td>\n","      <td>54.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 97 columns</p>\n","</div>"],"text/plain":["   Feature_2  Feature_3  ...  Feature_50_No  Feature_50_Yes\n","0       28.0      130.0  ...              1               0\n","1       18.0       95.0  ...              1               0\n","2       44.0      152.0  ...              1               0\n","3       19.0      112.0  ...              1               0\n","4       17.5      105.5  ...              1               0\n","\n","[5 rows x 97 columns]"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":541},"id":"eN7flMy5YTre","executionInfo":{"status":"ok","timestamp":1621945147620,"user_tz":-180,"elapsed":122,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"b83c14c1-57c6-4081-b069-cc595b3175fb"},"source":["cleaned_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Disease</th>\n","      <th>Feature_1</th>\n","      <th>Feature_2</th>\n","      <th>Feature_3</th>\n","      <th>Feature_4</th>\n","      <th>Feature_5</th>\n","      <th>Feature_6</th>\n","      <th>Feature_7</th>\n","      <th>Feature_8</th>\n","      <th>Feature_9</th>\n","      <th>Feature_10</th>\n","      <th>Feature_11</th>\n","      <th>Feature_12</th>\n","      <th>Feature_13</th>\n","      <th>Feature_14</th>\n","      <th>Feature_15</th>\n","      <th>Feature_16</th>\n","      <th>Feature_17</th>\n","      <th>Feature_18</th>\n","      <th>Feature_19</th>\n","      <th>Feature_20</th>\n","      <th>Feature_21</th>\n","      <th>Feature_22</th>\n","      <th>Feature_23</th>\n","      <th>Feature_24</th>\n","      <th>Feature_25</th>\n","      <th>Feature_26</th>\n","      <th>Feature_27</th>\n","      <th>Feature_28</th>\n","      <th>Feature_29</th>\n","      <th>Feature_30</th>\n","      <th>Feature_31</th>\n","      <th>Feature_32</th>\n","      <th>Feature_33</th>\n","      <th>Feature_34</th>\n","      <th>Feature_35</th>\n","      <th>Feature_37</th>\n","      <th>Feature_38</th>\n","      <th>Feature_39</th>\n","      <th>Feature_40</th>\n","      <th>Feature_41</th>\n","      <th>Feature_42</th>\n","      <th>Feature_43</th>\n","      <th>Feature_44</th>\n","      <th>Feature_45</th>\n","      <th>Feature_46</th>\n","      <th>Feature_47</th>\n","      <th>Feature_48</th>\n","      <th>Feature_49</th>\n","      <th>Feature_50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>28.0</td>\n","      <td>130.0</td>\n","      <td>96.0</td>\n","      <td>2.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>18.0</td>\n","      <td>95.0</td>\n","      <td>46.0</td>\n","      <td>3.0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>44.0</td>\n","      <td>152.0</td>\n","      <td>150.0</td>\n","      <td>1.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>19.0</td>\n","      <td>112.0</td>\n","      <td>66.0</td>\n","      <td>18.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>17.5</td>\n","      <td>105.5</td>\n","      <td>54.0</td>\n","      <td>3.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>395</th>\n","      <td>Disease_1</td>\n","      <td>Female</td>\n","      <td>36.0</td>\n","      <td>142.0</td>\n","      <td>144.0</td>\n","      <td>24.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>3-4 Days a Week</td>\n","      <td>No Difference</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>8</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>396</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>60.0</td>\n","      <td>172.0</td>\n","      <td>165.0</td>\n","      <td>120.0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Every Day</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>9</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>397</th>\n","      <td>Disease_1</td>\n","      <td>Female</td>\n","      <td>41.0</td>\n","      <td>147.0</td>\n","      <td>156.0</td>\n","      <td>60.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>3-4 Days a Week</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>9</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>398</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>37.0</td>\n","      <td>138.0</td>\n","      <td>144.0</td>\n","      <td>120.0</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>3-4 Days a Week</td>\n","      <td>Evenings</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>9</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>399</th>\n","      <td>Disease_1</td>\n","      <td>Male</td>\n","      <td>30.0</td>\n","      <td>130.0</td>\n","      <td>108.0</td>\n","      <td>6.0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>1-2 Days a Month</td>\n","      <td>No Difference</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>9</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>400 rows × 50 columns</p>\n","</div>"],"text/plain":["       Disease Feature_1  Feature_2  ...  Feature_48  Feature_49  Feature_50\n","0    Disease_1      Male       28.0  ...          No          No          No\n","1    Disease_1      Male       18.0  ...          No          No          No\n","2    Disease_1      Male       44.0  ...          No          No          No\n","3    Disease_1      Male       19.0  ...          No          No          No\n","4    Disease_1      Male       17.5  ...          No         Yes          No\n","..         ...       ...        ...  ...         ...         ...         ...\n","395  Disease_1    Female       36.0  ...          No          No          No\n","396  Disease_1      Male       60.0  ...          No          No          No\n","397  Disease_1    Female       41.0  ...          No          No          No\n","398  Disease_1      Male       37.0  ...          No          No          No\n","399  Disease_1      Male       30.0  ...          No          No          No\n","\n","[400 rows x 50 columns]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"GQXK8Z-2bvAj"},"source":["features_and_possible_values = {}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mY6yHT9wYXrb","executionInfo":{"status":"ok","timestamp":1621945147953,"user_tz":-180,"elapsed":435,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"81048ec4-88fd-433e-d869-e185d3db622f"},"source":["from sklearn.preprocessing import LabelEncoder\n","\n","le = LabelEncoder()\n","\n","for c, t in zip(cleaned_df.columns, cleaned_df.dtypes):\n","    if(t == object):\n","      le = LabelEncoder()\n","      cleaned_df[c] = le.fit_transform(cleaned_df[c])\n","      features_and_possible_values[c] = [np.unique(list(le.inverse_transform(cleaned_df[c]))), le.transform(np.unique(list(le.inverse_transform(cleaned_df[c]))))]\n","features_and_possible_values"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Disease': [array(['Disease_1', 'Disease_2', 'Disease_3', 'Disease_4'], dtype='<U9'),\n","  array([0, 1, 2, 3])],\n"," 'Feature_1': [array(['Female', 'Male'], dtype='<U6'), array([0, 1])],\n"," 'Feature_10': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_11': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_12': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_13': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_14': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_15': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_16': [array(['No'], dtype='<U2'), array([0])],\n"," 'Feature_17': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_18': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_19': [array(['No'], dtype='<U2'), array([0])],\n"," 'Feature_20': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_21': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_22': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_23': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_24': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_25': [array(['No'], dtype='<U2'), array([0])],\n"," 'Feature_26': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_27': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_28': [array(['1-2 Days a Month', '1-2 Days a Week', '3-4 Days a Week',\n","         'Every Day'], dtype='<U16'), array([0, 1, 2, 3])],\n"," 'Feature_29': [array(['Evenings', 'Mornings', 'No Difference'], dtype='<U13'),\n","  array([0, 1, 2])],\n"," 'Feature_30': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_31': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_32': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_33': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_34': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_35': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_37': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_38': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_39': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_40': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_41': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_42': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_43': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_45': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_46': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_47': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_48': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_49': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_50': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_6': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_7': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_8': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])],\n"," 'Feature_9': [array(['No', 'Yes'], dtype='<U3'), array([0, 1])]}"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"DEyb83C4BnW7"},"source":["output_dict = {\"Disease_1\" : 0, \"Disease_2\" : 1, \"Disease_3\" : 2, \"Disease_4\" : 3}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X17931DbM44A"},"source":["# new_tuple = (  (\"time_interval\", ))))\n","two_tuples = {\"yes_no\": ((\"0\", \"No\"), (\"1\", \"Yes\")),\n","              \"sex\": ((\"0\", \"Male\"), (\"1\", \"Female\")), \n","              \"days\": ((\"1\", \"Every Day\"), (\"2\", \"1-2 Days a Week\"), (\"3\", \"3-4 Days a Week\"), (\"4\", \"1-2 Days a Month\")),\n","              \"time_interval\": ((\"0\", \"Evenings\"), (\"1\", \"Mornings\"), (\"2\", \"No Difference\"))}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ti4aIoENDdRc"},"source":["We split the target column and feature columns into X and Y. X stores feature columns and Y stores the target column. "]},{"cell_type":"code","metadata":{"id":"piZzRYQL8DJD"},"source":["y = cleaned_df['Disease']\n","X = cleaned_df.drop('Disease', axis = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_XOXZxhog997"},"source":["We used SelectKBest function for feature selection. Basically, SelectKBest selects the features according to the best k highest scores.We have selected first 10 features dynamically. As we can see above, some features' scores are very high whereas some features' scores are very low. We eliminated the features which have low scores. At the end, we got 10 features. \n","\n","These are,\n","* Feature_5  \n","* Feature_4  \n","* Feature_39   \n","* Feature_2   \n","* Feature_43   \n","* Feature_37   \n","* Feature_3   \n","* Feature_29   \n","* Feature_40   \n","* Feature_28   "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"yWm3RK6W7UEY","executionInfo":{"status":"ok","timestamp":1621945147968,"user_tz":-180,"elapsed":113,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"282947ed-33ce-46c3-a07c-5dc8274a8144"},"source":["import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.feature_selection import SelectKBest, chi2\n","\n","k_best = SelectKBest(chi2, k=\"all\")\n","fit = k_best.fit(X, y)\n","feature_scores = pd.DataFrame(fit.scores_)\n","data_frame_columns = pd.DataFrame(X.columns)\n","feat_scores = pd.concat([data_frame_columns, feature_scores], axis=1)\n","feat_scores.columns = [\"Features\", \"Score\"]\n","best = feat_scores.nlargest(10, 'Score')\n","\n","print(best)\n","\n","selected_features = best.Features\n","selected_X = X[selected_features]\n","selected_X"],"execution_count":null,"outputs":[{"output_type":"stream","text":["      Features        Score\n","4    Feature_5  1412.288544\n","3    Feature_4  1262.976290\n","37  Feature_39   262.069119\n","1    Feature_2   243.029122\n","41  Feature_43   228.407604\n","35  Feature_37   192.617480\n","2    Feature_3   169.887557\n","28  Feature_29   159.087819\n","38  Feature_40   140.247863\n","27  Feature_28   124.703365\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature_5</th>\n","      <th>Feature_4</th>\n","      <th>Feature_39</th>\n","      <th>Feature_2</th>\n","      <th>Feature_43</th>\n","      <th>Feature_37</th>\n","      <th>Feature_3</th>\n","      <th>Feature_29</th>\n","      <th>Feature_40</th>\n","      <th>Feature_28</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.0</td>\n","      <td>96.0</td>\n","      <td>0</td>\n","      <td>28.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>130.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.0</td>\n","      <td>46.0</td>\n","      <td>0</td>\n","      <td>18.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>95.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>150.0</td>\n","      <td>0</td>\n","      <td>44.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>152.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>18.0</td>\n","      <td>66.0</td>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>112.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.0</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>17.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>105.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>395</th>\n","      <td>24.0</td>\n","      <td>144.0</td>\n","      <td>0</td>\n","      <td>36.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>142.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>396</th>\n","      <td>120.0</td>\n","      <td>165.0</td>\n","      <td>0</td>\n","      <td>60.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>172.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>397</th>\n","      <td>60.0</td>\n","      <td>156.0</td>\n","      <td>0</td>\n","      <td>41.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>147.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>398</th>\n","      <td>120.0</td>\n","      <td>144.0</td>\n","      <td>0</td>\n","      <td>37.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>138.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>399</th>\n","      <td>6.0</td>\n","      <td>108.0</td>\n","      <td>0</td>\n","      <td>30.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>130.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>400 rows × 10 columns</p>\n","</div>"],"text/plain":["     Feature_5  Feature_4  Feature_39  ...  Feature_29  Feature_40  Feature_28\n","0          2.0       96.0           0  ...           2           0           3\n","1          3.0       46.0           0  ...           0           0           3\n","2          1.0      150.0           0  ...           2           0           3\n","3         18.0       66.0           0  ...           0           0           3\n","4          3.0       54.0           0  ...           0           0           3\n","..         ...        ...         ...  ...         ...         ...         ...\n","395       24.0      144.0           0  ...           2           0           2\n","396      120.0      165.0           0  ...           0           0           3\n","397       60.0      156.0           0  ...           0           0           2\n","398      120.0      144.0           0  ...           0           0           2\n","399        6.0      108.0           0  ...           2           0           0\n","\n","[400 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"kGLl_JlfDhez"},"source":["These are the columns we have selected in SelectKBest algorithm. Now we are ready to train and test a model."]},{"cell_type":"code","metadata":{"id":"UamjUpOHCbul"},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(selected_X, y, test_size=0.30, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r0W3WHRyDi0X"},"source":["We split the dataset into train-test parts. 70% of the dataset was allocated as training data and 30% of the dataset was allocated for test data. \n","\n","We normalized the data. Normalization is important for machine learning models, especially number-based columns. Such machine learning models perform better or converge faster when normalization is applied to data.We are normalizing after splitting the data so that train and test values do not interfere each other."]},{"cell_type":"code","metadata":{"id":"Vv5rCAJRL3Hq"},"source":["selectednoncategoricalfeaturelist = []\n","for feature in noncategoricalfeaturelist:\n","  if feature in X_train.columns:\n","    selectednoncategoricalfeaturelist.append(feature)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K8l-v0i2HLS8"},"source":["from sklearn.preprocessing import MinMaxScaler\n","\n","normalized_X_train = X_train.copy()\n","normalized_X_train[selectednoncategoricalfeaturelist]=(X_train[selectednoncategoricalfeaturelist]-X_train[selectednoncategoricalfeaturelist].min())/(X_train[selectednoncategoricalfeaturelist].max()-X_train[selectednoncategoricalfeaturelist].min())\n","normalized_X_test = X_test.copy()\n","normalized_X_test[selectednoncategoricalfeaturelist]=(X_test[selectednoncategoricalfeaturelist]-X_test[selectednoncategoricalfeaturelist].min())/(X_test[selectednoncategoricalfeaturelist].max()-X_test[selectednoncategoricalfeaturelist].min())\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DSTrI_29kApR"},"source":["Lets see the difference between X_train and normalized_X_train."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"KoASgJQvHe6t","executionInfo":{"status":"ok","timestamp":1621945148029,"user_tz":-180,"elapsed":141,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"687c6eb2-ec36-4603-8fa0-2f400f2074a1"},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature_5</th>\n","      <th>Feature_4</th>\n","      <th>Feature_39</th>\n","      <th>Feature_2</th>\n","      <th>Feature_43</th>\n","      <th>Feature_37</th>\n","      <th>Feature_3</th>\n","      <th>Feature_29</th>\n","      <th>Feature_40</th>\n","      <th>Feature_28</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>157</th>\n","      <td>6.0</td>\n","      <td>108.0</td>\n","      <td>1</td>\n","      <td>25.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>128.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>109</th>\n","      <td>48.0</td>\n","      <td>144.0</td>\n","      <td>1</td>\n","      <td>33.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>141.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>60.0</td>\n","      <td>132.0</td>\n","      <td>0</td>\n","      <td>28.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>120.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>347</th>\n","      <td>12.0</td>\n","      <td>156.0</td>\n","      <td>0</td>\n","      <td>33.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>141.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>48.0</td>\n","      <td>120.0</td>\n","      <td>0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>128.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>48.0</td>\n","      <td>72.0</td>\n","      <td>0</td>\n","      <td>18.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>111.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>106</th>\n","      <td>6.0</td>\n","      <td>180.0</td>\n","      <td>1</td>\n","      <td>40.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>152.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>270</th>\n","      <td>102.0</td>\n","      <td>197.0</td>\n","      <td>0</td>\n","      <td>75.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>175.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>348</th>\n","      <td>12.0</td>\n","      <td>156.0</td>\n","      <td>0</td>\n","      <td>38.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>147.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>102</th>\n","      <td>6.0</td>\n","      <td>168.0</td>\n","      <td>1</td>\n","      <td>44.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>155.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>280 rows × 10 columns</p>\n","</div>"],"text/plain":["     Feature_5  Feature_4  Feature_39  ...  Feature_29  Feature_40  Feature_28\n","157        6.0      108.0           1  ...           1           0           3\n","109       48.0      144.0           1  ...           1           0           3\n","17        60.0      132.0           0  ...           0           0           3\n","347       12.0      156.0           0  ...           2           0           0\n","24        48.0      120.0           0  ...           0           0           3\n","..         ...        ...         ...  ...         ...         ...         ...\n","71        48.0       72.0           0  ...           0           0           3\n","106        6.0      180.0           1  ...           1           1           3\n","270      102.0      197.0           0  ...           2           0           2\n","348       12.0      156.0           0  ...           2           0           0\n","102        6.0      168.0           1  ...           1           1           3\n","\n","[280 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"2vepCIRVZBLl","executionInfo":{"status":"ok","timestamp":1621945148035,"user_tz":-180,"elapsed":144,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"263d2092-5e8d-42fd-f930-222d7933968d"},"source":["normalized_X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature_5</th>\n","      <th>Feature_4</th>\n","      <th>Feature_39</th>\n","      <th>Feature_2</th>\n","      <th>Feature_43</th>\n","      <th>Feature_37</th>\n","      <th>Feature_3</th>\n","      <th>Feature_29</th>\n","      <th>Feature_40</th>\n","      <th>Feature_28</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>157</th>\n","      <td>0.035370</td>\n","      <td>0.477612</td>\n","      <td>1</td>\n","      <td>0.202703</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.495238</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>109</th>\n","      <td>0.285459</td>\n","      <td>0.656716</td>\n","      <td>1</td>\n","      <td>0.310811</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.619048</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>0.356913</td>\n","      <td>0.597015</td>\n","      <td>0</td>\n","      <td>0.243243</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.419048</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>347</th>\n","      <td>0.071097</td>\n","      <td>0.716418</td>\n","      <td>0</td>\n","      <td>0.310811</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.619048</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>0.285459</td>\n","      <td>0.537313</td>\n","      <td>0</td>\n","      <td>0.216216</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.495238</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>0.285459</td>\n","      <td>0.298507</td>\n","      <td>0</td>\n","      <td>0.108108</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.333333</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>106</th>\n","      <td>0.035370</td>\n","      <td>0.835821</td>\n","      <td>1</td>\n","      <td>0.405405</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.723810</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>270</th>\n","      <td>0.607003</td>\n","      <td>0.920398</td>\n","      <td>0</td>\n","      <td>0.878378</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.942857</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>348</th>\n","      <td>0.071097</td>\n","      <td>0.716418</td>\n","      <td>0</td>\n","      <td>0.378378</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.676190</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>102</th>\n","      <td>0.035370</td>\n","      <td>0.776119</td>\n","      <td>1</td>\n","      <td>0.459459</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.752381</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>280 rows × 10 columns</p>\n","</div>"],"text/plain":["     Feature_5  Feature_4  Feature_39  ...  Feature_29  Feature_40  Feature_28\n","157   0.035370   0.477612           1  ...           1           0           3\n","109   0.285459   0.656716           1  ...           1           0           3\n","17    0.356913   0.597015           0  ...           0           0           3\n","347   0.071097   0.716418           0  ...           2           0           0\n","24    0.285459   0.537313           0  ...           0           0           3\n","..         ...        ...         ...  ...         ...         ...         ...\n","71    0.285459   0.298507           0  ...           0           0           3\n","106   0.035370   0.835821           1  ...           1           1           3\n","270   0.607003   0.920398           0  ...           2           0           2\n","348   0.071097   0.716418           0  ...           2           0           0\n","102   0.035370   0.776119           1  ...           1           1           3\n","\n","[280 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"BY2axvK5HcBm","executionInfo":{"status":"ok","timestamp":1621945148049,"user_tz":-180,"elapsed":154,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"6c21049d-d6ca-45cb-9fee-7d196a61fb2e"},"source":["X_test"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature_5</th>\n","      <th>Feature_4</th>\n","      <th>Feature_39</th>\n","      <th>Feature_2</th>\n","      <th>Feature_43</th>\n","      <th>Feature_37</th>\n","      <th>Feature_3</th>\n","      <th>Feature_29</th>\n","      <th>Feature_40</th>\n","      <th>Feature_28</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>209</th>\n","      <td>120.0</td>\n","      <td>192.0</td>\n","      <td>0</td>\n","      <td>90.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>163.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>280</th>\n","      <td>20.0</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>16.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>108.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>12.0</td>\n","      <td>48.0</td>\n","      <td>0</td>\n","      <td>14.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>94.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>210</th>\n","      <td>12.0</td>\n","      <td>48.0</td>\n","      <td>0</td>\n","      <td>17.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>101.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>93</th>\n","      <td>3.0</td>\n","      <td>171.0</td>\n","      <td>0</td>\n","      <td>40.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>143.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>12.0</td>\n","      <td>72.0</td>\n","      <td>0</td>\n","      <td>18.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>115.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>79</th>\n","      <td>12.0</td>\n","      <td>36.0</td>\n","      <td>0</td>\n","      <td>18.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>115.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>285</th>\n","      <td>12.0</td>\n","      <td>36.0</td>\n","      <td>0</td>\n","      <td>18.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>95.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>305</th>\n","      <td>12.0</td>\n","      <td>60.0</td>\n","      <td>0</td>\n","      <td>18.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>115.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>281</th>\n","      <td>12.0</td>\n","      <td>60.0</td>\n","      <td>0</td>\n","      <td>17.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>110.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>120 rows × 10 columns</p>\n","</div>"],"text/plain":["     Feature_5  Feature_4  Feature_39  ...  Feature_29  Feature_40  Feature_28\n","209      120.0      192.0           0  ...           0           0           1\n","280       20.0       54.0           0  ...           0           0           2\n","33        12.0       48.0           0  ...           0           0           3\n","210       12.0       48.0           0  ...           0           0           1\n","93         3.0      171.0           0  ...           2           0           3\n","..         ...        ...         ...  ...         ...         ...         ...\n","60        12.0       72.0           0  ...           0           0           3\n","79        12.0       36.0           0  ...           0           0           3\n","285       12.0       36.0           0  ...           0           0           2\n","305       12.0       60.0           0  ...           1           0           0\n","281       12.0       60.0           0  ...           0           0           2\n","\n","[120 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"A7K3F2FcaMwp","executionInfo":{"status":"ok","timestamp":1621945148641,"user_tz":-180,"elapsed":126,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"d4ea3a55-f926-4bd8-85ad-b1c8b363f42c"},"source":["normalized_X_test"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature_5</th>\n","      <th>Feature_4</th>\n","      <th>Feature_39</th>\n","      <th>Feature_2</th>\n","      <th>Feature_43</th>\n","      <th>Feature_37</th>\n","      <th>Feature_3</th>\n","      <th>Feature_29</th>\n","      <th>Feature_40</th>\n","      <th>Feature_28</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>209</th>\n","      <td>0.833183</td>\n","      <td>0.933333</td>\n","      <td>0</td>\n","      <td>1.00000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.868132</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>280</th>\n","      <td>0.138111</td>\n","      <td>0.166667</td>\n","      <td>0</td>\n","      <td>0.08125</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.263736</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>0.082505</td>\n","      <td>0.133333</td>\n","      <td>0</td>\n","      <td>0.05000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.109890</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>210</th>\n","      <td>0.082505</td>\n","      <td>0.133333</td>\n","      <td>0</td>\n","      <td>0.08750</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.186813</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>93</th>\n","      <td>0.019949</td>\n","      <td>0.816667</td>\n","      <td>0</td>\n","      <td>0.37500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.648352</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>0.082505</td>\n","      <td>0.266667</td>\n","      <td>0</td>\n","      <td>0.10000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.340659</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>79</th>\n","      <td>0.082505</td>\n","      <td>0.066667</td>\n","      <td>0</td>\n","      <td>0.10000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.340659</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>285</th>\n","      <td>0.082505</td>\n","      <td>0.066667</td>\n","      <td>0</td>\n","      <td>0.10000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.120879</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>305</th>\n","      <td>0.082505</td>\n","      <td>0.200000</td>\n","      <td>0</td>\n","      <td>0.10000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.340659</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>281</th>\n","      <td>0.082505</td>\n","      <td>0.200000</td>\n","      <td>0</td>\n","      <td>0.08750</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.285714</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>120 rows × 10 columns</p>\n","</div>"],"text/plain":["     Feature_5  Feature_4  Feature_39  ...  Feature_29  Feature_40  Feature_28\n","209   0.833183   0.933333           0  ...           0           0           1\n","280   0.138111   0.166667           0  ...           0           0           2\n","33    0.082505   0.133333           0  ...           0           0           3\n","210   0.082505   0.133333           0  ...           0           0           1\n","93    0.019949   0.816667           0  ...           2           0           3\n","..         ...        ...         ...  ...         ...         ...         ...\n","60    0.082505   0.266667           0  ...           0           0           3\n","79    0.082505   0.066667           0  ...           0           0           3\n","285   0.082505   0.066667           0  ...           0           0           2\n","305   0.082505   0.200000           0  ...           1           0           0\n","281   0.082505   0.200000           0  ...           0           0           2\n","\n","[120 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"BS9WCRS8kGng"},"source":["We can see that our train and test set are normalized."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"27I131CxwKpI","executionInfo":{"status":"ok","timestamp":1621945148649,"user_tz":-180,"elapsed":129,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"f577e56f-2dc0-4e13-8883-13d696ad2914"},"source":["normalized_X_train.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 280 entries, 157 to 102\n","Data columns (total 10 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Feature_5   280 non-null    float64\n"," 1   Feature_4   280 non-null    float64\n"," 2   Feature_39  280 non-null    int64  \n"," 3   Feature_2   280 non-null    float64\n"," 4   Feature_43  280 non-null    int64  \n"," 5   Feature_37  280 non-null    int64  \n"," 6   Feature_3   280 non-null    float64\n"," 7   Feature_29  280 non-null    int64  \n"," 8   Feature_40  280 non-null    int64  \n"," 9   Feature_28  280 non-null    int64  \n","dtypes: float64(4), int64(6)\n","memory usage: 24.1 KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"svglc7GTK-Eq","executionInfo":{"status":"ok","timestamp":1621945148651,"user_tz":-180,"elapsed":112,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"99c97d6b-fe98-45b8-d9f6-f35dc988af04"},"source":["X_train.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Feature_5', 'Feature_4', 'Feature_39', 'Feature_2', 'Feature_43',\n","       'Feature_37', 'Feature_3', 'Feature_29', 'Feature_40', 'Feature_28'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"fEQLA-zoRJKW"},"source":["X_train = normalized_X_train\n","X_test = normalized_X_test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"ihLCOKLHRPXa","executionInfo":{"status":"ok","timestamp":1621945148659,"user_tz":-180,"elapsed":74,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"968d2c5b-f3a1-478d-eafb-1d44fa6ce430"},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature_5</th>\n","      <th>Feature_4</th>\n","      <th>Feature_39</th>\n","      <th>Feature_2</th>\n","      <th>Feature_43</th>\n","      <th>Feature_37</th>\n","      <th>Feature_3</th>\n","      <th>Feature_29</th>\n","      <th>Feature_40</th>\n","      <th>Feature_28</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>157</th>\n","      <td>0.035370</td>\n","      <td>0.477612</td>\n","      <td>1</td>\n","      <td>0.202703</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.495238</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>109</th>\n","      <td>0.285459</td>\n","      <td>0.656716</td>\n","      <td>1</td>\n","      <td>0.310811</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.619048</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>0.356913</td>\n","      <td>0.597015</td>\n","      <td>0</td>\n","      <td>0.243243</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.419048</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>347</th>\n","      <td>0.071097</td>\n","      <td>0.716418</td>\n","      <td>0</td>\n","      <td>0.310811</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.619048</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>0.285459</td>\n","      <td>0.537313</td>\n","      <td>0</td>\n","      <td>0.216216</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.495238</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>0.285459</td>\n","      <td>0.298507</td>\n","      <td>0</td>\n","      <td>0.108108</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.333333</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>106</th>\n","      <td>0.035370</td>\n","      <td>0.835821</td>\n","      <td>1</td>\n","      <td>0.405405</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.723810</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>270</th>\n","      <td>0.607003</td>\n","      <td>0.920398</td>\n","      <td>0</td>\n","      <td>0.878378</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.942857</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>348</th>\n","      <td>0.071097</td>\n","      <td>0.716418</td>\n","      <td>0</td>\n","      <td>0.378378</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.676190</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>102</th>\n","      <td>0.035370</td>\n","      <td>0.776119</td>\n","      <td>1</td>\n","      <td>0.459459</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.752381</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>280 rows × 10 columns</p>\n","</div>"],"text/plain":["     Feature_5  Feature_4  Feature_39  ...  Feature_29  Feature_40  Feature_28\n","157   0.035370   0.477612           1  ...           1           0           3\n","109   0.285459   0.656716           1  ...           1           0           3\n","17    0.356913   0.597015           0  ...           0           0           3\n","347   0.071097   0.716418           0  ...           2           0           0\n","24    0.285459   0.537313           0  ...           0           0           3\n","..         ...        ...         ...  ...         ...         ...         ...\n","71    0.285459   0.298507           0  ...           0           0           3\n","106   0.035370   0.835821           1  ...           1           1           3\n","270   0.607003   0.920398           0  ...           2           0           2\n","348   0.071097   0.716418           0  ...           2           0           0\n","102   0.035370   0.776119           1  ...           1           1           3\n","\n","[280 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"mKCFREQ1_mFF"},"source":["model_scores = []\n","model_f1_scores = []\n","model_recall_scores = []\n","model_presicion_scores = []"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"weBKAqlTkXhY"},"source":["# Modeling\n","\n","## Desicion Tree Classifier \n","\n","Decision trees are a non-parametric supervised learning model for classificaiton and regression. It has some advantages for using it. It requires little data preparation. For example, normalization of the data does not so much effect the results positively. Also, it can handle both numerical and categorical data. \n","\n","Firstly, we created default `DecisionTreeClassifier` model. Then, the model was trained with `X_train` and `y_train`. After that we tested our trained model with unseen `X_test` data. We obtained the some evaluation metrics like *accurracy*, *precision*, *AUC score*. Also, we draw the confusion matrix. Confusion matrix is a good way to see **true-positive** and **false-positive**. "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":314},"id":"Yuo3wQR1Ea9Y","executionInfo":{"status":"ok","timestamp":1621945149129,"user_tz":-180,"elapsed":538,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"a2a379e2-aa2a-4816-c3f0-3bee508193c3"},"source":["from sklearn import tree\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","from sklearn import metrics\n","\n","clf = tree.DecisionTreeClassifier()\n","clf = clf.fit(X_train, y_train)\n","\n","y_pred = clf.predict(X_test)\n","\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n","model_scores.append((\"DesicionTree\", metrics.accuracy_score(y_test, y_pred)))\n","model_f1_scores.append((\"DesicionTree\", metrics.f1_score(y_test, y_pred, average='micro')))\n","model_recall_scores.append((\"DesicionTree\", metrics.recall_score(y_test, y_pred, average='micro')))\n","model_presicion_scores.append((\"DesicionTree\", metrics.precision_score(y_test, y_pred, average='micro')))\n","\n","cm = confusion_matrix(y_test, y_pred)\n","cmd = ConfusionMatrixDisplay(cm, display_labels=output_dict)\n","cmd.plot()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.9416666666666667\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa3b06f70d0>"]},"metadata":{"tags":[]},"execution_count":41},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"vXJcjYd4F4X3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621945149130,"user_tz":-180,"elapsed":123,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"72ad30a9-a20a-450e-b146-9be8113de175"},"source":["print(metrics.f1_score(y_test, y_pred, average='micro'))\n","\n","print(metrics.classification_report(y_test, y_pred, zero_division = 1))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.9416666666666667\n","              precision    recall  f1-score   support\n","\n","           0       0.96      0.96      0.96        82\n","           1       0.77      0.91      0.83        11\n","           2       1.00      0.86      0.92        21\n","           3       0.86      1.00      0.92         6\n","\n","    accuracy                           0.94       120\n","   macro avg       0.90      0.93      0.91       120\n","weighted avg       0.95      0.94      0.94       120\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xB4qIBCPty6D"},"source":["As we can see desicion tree performs good, it has 0.95 accuracy, 0.95 f1 score and presicion scores are also high. The tree is very good at identifying different disseases."]},{"cell_type":"markdown","metadata":{"id":"AQby_sttkvH7"},"source":["## Random Forest Classifier\n","\n","Random forests are an ensemble learning method for classification. It constructs a multitude of decision trees at training time and outputting the the class that is the mode of the classes of the individual trees. Random forests correct of the habit of overfitting to their training data of the decision tree. Each decision tree operates as an ensemble.\n","\n","Firstly, we created a RandomForestClassifier model with default parameters. Then, we trained and tested model with train and test data."]},{"cell_type":"code","metadata":{"id":"63pkASFDGaaX","colab":{"base_uri":"https://localhost:8080/","height":314},"executionInfo":{"status":"ok","timestamp":1621945149131,"user_tz":-180,"elapsed":102,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"f66e712a-ea77-413b-c948-2f15fe2a25e4"},"source":["from sklearn.ensemble import RandomForestClassifier\n","\n","clf_OD = RandomForestClassifier(random_state=42)\n","clf_OD.fit(X_train, y_train)\n","prediction_result = clf_OD.predict(X_test)\n","\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, prediction_result))\n","base_accuracy = metrics.accuracy_score(y_test, prediction_result)\n","model_scores.append((\"RandomForestClassifier\", metrics.accuracy_score(y_test, prediction_result)))\n","model_f1_scores.append((\"RandomForestClassifier\", metrics.f1_score(y_test, prediction_result, average='micro')))\n","model_recall_scores.append((\"RandomForestClassifier\", metrics.recall_score(y_test, prediction_result, average='micro')))\n","model_presicion_scores.append((\"RandomForestClassifier\", metrics.precision_score(y_test, prediction_result, average='micro')))\n","\n","\n","cm = confusion_matrix(y_test, prediction_result)\n","cmd = ConfusionMatrixDisplay(cm, display_labels=output_dict)\n","cmd.plot()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.9833333333333333\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa3c30dfa50>"]},"metadata":{"tags":[]},"execution_count":43},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"DnhMGWPlFTF4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621945149133,"user_tz":-180,"elapsed":85,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"2c6453d8-6d7e-4fda-b66e-7f0ac2bda345"},"source":["print(metrics.f1_score(y_test, prediction_result, average='micro'))\n","\n","print(metrics.classification_report(y_test, prediction_result))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.9833333333333333\n","              precision    recall  f1-score   support\n","\n","           0       0.99      1.00      0.99        82\n","           1       1.00      0.91      0.95        11\n","           2       0.95      0.95      0.95        21\n","           3       1.00      1.00      1.00         6\n","\n","    accuracy                           0.98       120\n","   macro avg       0.99      0.97      0.97       120\n","weighted avg       0.98      0.98      0.98       120\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"o_FBTlgNRzla","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621945149134,"user_tz":-180,"elapsed":64,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"592c606f-24c4-4cc0-cd79-f9c3906e20b2"},"source":["clf_OD.get_params"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method BaseEstimator.get_params of RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='gini', max_depth=None, max_features='auto',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=42, verbose=0,\n","                       warm_start=False)>"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"markdown","metadata":{"id":"THLmmLXbuOFh"},"source":["As we can see Random Forest Classifier is better than desicion tree, it has 0.96 accuracy, 0.96 f1 score and presicion scores are better and higher than desicion tree. The tree is very good at identifying different disseases. Nearly perfect at identifying these. We might consider selecting this model."]},{"cell_type":"markdown","metadata":{"id":"0vuOemr9k12U"},"source":["## SVM \n","\n","Support vector machines(SVMs) are a set of supervised learning methods used for classification. It finds the best boundary line to separate 2 groups.\n","\n","We firstly created a svm.LinearSVC model with default parameters. The model was trained with X_train and y_train. Then, we evaluated the prediction with y_test data."]},{"cell_type":"code","metadata":{"id":"ArGQZ0vBGLlN","colab":{"base_uri":"https://localhost:8080/","height":501},"executionInfo":{"status":"ok","timestamp":1621945149646,"user_tz":-180,"elapsed":562,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"79e9c6e9-e659-4397-faa0-e9006b09df01"},"source":["from sklearn import svm\n","\n","SVM = svm.LinearSVC(max_iter=1000)\n","SVM.fit(X_train, y_train)\n","svmpred = SVM.predict(X_test)\n","\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, svmpred))\n","model_scores.append((\"SVM\", metrics.accuracy_score(y_test, svmpred)))\n","model_f1_scores.append((\"SVM\", metrics.f1_score(y_test, svmpred, average='micro')))\n","model_recall_scores.append((\"SVM\", metrics.recall_score(y_test, svmpred, average='micro')))\n","model_presicion_scores.append((\"SVM\", metrics.precision_score(y_test, svmpred, average='micro')))\n","cm3 = confusion_matrix(y_test, svmpred)\n","cmd3 = ConfusionMatrixDisplay(cm3, display_labels = output_dict)\n","cmd3.plot()\n","\n","print(metrics.f1_score(y_test, svmpred, average='micro'))\n","\n","print(metrics.classification_report(y_test, svmpred,zero_division = 1))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.95\n","0.9500000000000001\n","              precision    recall  f1-score   support\n","\n","           0       0.96      1.00      0.98        82\n","           1       1.00      0.91      0.95        11\n","           2       0.86      0.86      0.86        21\n","           3       1.00      0.67      0.80         6\n","\n","    accuracy                           0.95       120\n","   macro avg       0.96      0.86      0.90       120\n","weighted avg       0.95      0.95      0.95       120\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"o68S88d2un9J"},"source":["As we can see svm  has has 0.93 accuracy, 0.93 f1 score but presicion score are low. For diasease 3 and 4 presicion scores are low. Other models are better than svm in that point. "]},{"cell_type":"code","metadata":{"id":"xczwHse-GXNh","colab":{"base_uri":"https://localhost:8080/","height":501},"executionInfo":{"status":"ok","timestamp":1621945150120,"user_tz":-180,"elapsed":606,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"7d490704-982f-432f-d8f7-b4a72ac44081"},"source":["from sklearn.naive_bayes import GaussianNB\n","\n","naivemodel = GaussianNB()\n","naivemodel.fit(X_train,y_train)\n","naivepred = naivemodel.predict(X_test)\n","\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, naivepred))\n","model_scores.append((\"GaussianNB\", metrics.accuracy_score(y_test, naivepred)))\n","model_f1_scores.append((\"GaussianNB\", metrics.f1_score(y_test, naivepred, average='micro')))\n","model_recall_scores.append((\"GaussianNB\", metrics.recall_score(y_test, naivepred, average='micro')))\n","model_presicion_scores.append((\"GaussianNB\", metrics.precision_score(y_test, naivepred, average='micro')))\n","\n","cm7 = confusion_matrix(y_test, naivepred)\n","cmd7 = ConfusionMatrixDisplay(cm7, display_labels = output_dict)\n","cmd7.plot()\n","\n","print(metrics.f1_score(y_test, naivepred, average='micro'))\n","\n","print(metrics.classification_report(y_test, naivepred))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.9666666666666667\n","0.9666666666666667\n","              precision    recall  f1-score   support\n","\n","           0       0.96      1.00      0.98        82\n","           1       1.00      0.64      0.78        11\n","           2       1.00      1.00      1.00        21\n","           3       0.86      1.00      0.92         6\n","\n","    accuracy                           0.97       120\n","   macro avg       0.96      0.91      0.92       120\n","weighted avg       0.97      0.97      0.96       120\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"qXHTLw9Au8H0"},"source":["As we can see gaussian naive bayes performs good, it has 0.96 accuracy, 0.96 f1 score and presicion scores are also high. Presicion scores are also very similar to random forest classifier. We might also consider selecting this mode."]},{"cell_type":"markdown","metadata":{"id":"X1AHRYwxk98M"},"source":["## K Nearest Neighbors Classifier \n","\n","The k-NN algorithm is a simple, easy-to-implement supervised machine learning model for classification. Algorithm follows the similar things are close to each other. In plane, similar data points are close, that's why we can say that they might be in the same group. To find the similarities, we calculate the distance between data points. Then, we sort the distances and select the k-nearest points. Majority of the class would be the prediction of the data point. We usually choose the odd number for k, because we determine the class by looking at the majority. While choosing the odd number for k, we guarantee that there is no equality.\n","\n","We firstly created a KNeighborsClassifier model and then, the model was trained and tested with appropriate data. We did not change the default parameters. So, the k value is 5. So, our model was trained and tested as a 5-NN model."]},{"cell_type":"code","metadata":{"id":"zkC_S-QxGltq","colab":{"base_uri":"https://localhost:8080/","height":501},"executionInfo":{"status":"ok","timestamp":1621945150590,"user_tz":-180,"elapsed":494,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"5f482921-438e-4c9a-9da1-f90dd790a60f"},"source":["from sklearn.neighbors import KNeighborsClassifier\n","\n","knn = KNeighborsClassifier()\n","knn = knn.fit(X_train, y_train)\n","\n","pred_knn = knn.predict(X_test)\n","\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, pred_knn))\n","model_scores.append((\"KNeighborsClassifier\", metrics.accuracy_score(y_test, pred_knn)))\n","model_f1_scores.append((\"KNeighborsClassifier\", metrics.f1_score(y_test, pred_knn, average='micro')))\n","model_recall_scores.append((\"KNeighborsClassifier\", metrics.recall_score(y_test, pred_knn, average='micro')))\n","model_presicion_scores.append((\"KNeighborsClassifier\", metrics.precision_score(y_test, pred_knn, average='micro')))\n","\n","cm = confusion_matrix(y_test, pred_knn)\n","cmd = ConfusionMatrixDisplay(cm, display_labels = output_dict)\n","cmd.plot()\n","\n","print(metrics.f1_score(y_test, pred_knn, average='micro'))\n","\n","print(metrics.classification_report(y_test, pred_knn, zero_division = 1))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.975\n","0.975\n","              precision    recall  f1-score   support\n","\n","           0       0.99      1.00      0.99        82\n","           1       1.00      0.91      0.95        11\n","           2       0.91      0.95      0.93        21\n","           3       1.00      0.83      0.91         6\n","\n","    accuracy                           0.97       120\n","   macro avg       0.97      0.92      0.95       120\n","weighted avg       0.98      0.97      0.97       120\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Gd-VPp_CvM_z"},"source":["As we can see k nearest neightbor algorithm performs good, it has 0.95 accuracy, 0.95 f1 score and presicion scores are also high but presicion scores for diasease 3 is low. The model is good overall but with different test sets, it might not be best to pick this one because the model is bad at generilazing disease 3."]},{"cell_type":"code","metadata":{"id":"e216xRI1AzJl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621945150595,"user_tz":-180,"elapsed":89,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"35870dcb-596a-4acf-dbb7-58a0668f757c"},"source":["model_scores"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('DesicionTree', 0.9416666666666667),\n"," ('RandomForestClassifier', 0.9833333333333333),\n"," ('SVM', 0.95),\n"," ('GaussianNB', 0.9666666666666667),\n"," ('KNeighborsClassifier', 0.975)]"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"PxDh2FW_A1Aj"},"source":["acc = []\n","name = []\n","for x in model_scores:\n","  acc.append(x[1])\n","  name.append(x[0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NBEiMMnvA23_","colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"status":"ok","timestamp":1621945150599,"user_tz":-180,"elapsed":65,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"cd5b4662-c851-4c6b-8a8c-32321d2ae7f3"},"source":["fig = plt.figure(figsize = (10, 5))\n"," \n","# creating the bar plot\n","plt.bar(name, acc, color=[plt.cm.plasma(i*70) for i in range(1, 10)],\n","        width = 0.4)\n"," \n","plt.xlabel(\"Machine Learning Modeles Tried\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"Accuracy of Different Models\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"TKCD-ztlA9dZ"},"source":["acc = []\n","name = []\n","for x in model_f1_scores:\n","  acc.append(x[1])\n","  name.append(x[0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h6FduadsA-OH","colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"status":"ok","timestamp":1621945150604,"user_tz":-180,"elapsed":64,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"37f6a858-ffa8-4f66-e644-cfd149a06b9c"},"source":["fig = plt.figure(figsize = (10, 5))\n"," \n","# creating the bar plot\n","plt.bar(name, acc, color=[plt.cm.plasma(i*70) for i in range(1, 10)],\n","        width = 0.4)\n"," \n","plt.xlabel(\"Machine Learning Modeles Tried\")\n","plt.ylabel(\"F1 Scores\")\n","plt.title(\"F1 Scores of Different Models\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WTU25V_QBArA"},"source":["acc = []\n","name = []\n","for x in model_recall_scores:\n","  acc.append(x[1])\n","  name.append(x[0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"izLpcrUMBBG3","colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"status":"ok","timestamp":1621945151008,"user_tz":-180,"elapsed":459,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"df4e1393-034b-4a2d-e1d9-084df733f65e"},"source":["fig = plt.figure(figsize = (10, 5))\n"," \n","# creating the bar plot\n","plt.bar(name, acc, color=[plt.cm.plasma(i*70) for i in range(1, 10)],\n","        width = 0.4)\n"," \n","plt.xlabel(\"Machine Learning Modeles Tried\")\n","plt.ylabel(\"Recall Scores\")\n","plt.title(\"Recall Scores of Different Models\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"fe03ClHSBDrc"},"source":["acc = []\n","name = []\n","for x in model_presicion_scores:\n","  acc.append(x[1])\n","  name.append(x[0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BEHdoSNpBEGG","colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"status":"ok","timestamp":1621945151019,"user_tz":-180,"elapsed":38,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"a1c64a4d-d89d-492c-93ed-5033a5d09847"},"source":["fig = plt.figure(figsize = (10, 5))\n"," \n","# creating the bar plot\n","plt.bar(name, acc, color=[plt.cm.plasma(i*70) for i in range(1, 10)],\n","        width = 0.4)\n"," \n","plt.xlabel(\"Machine Learning Modeles Tried\")\n","plt.ylabel(\"Presicion Scores\")\n","plt.title(\"Presicion Scores of Different Models\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Htnl-qFkCaLU"},"source":["We are choosing Random Forest Classifier because rRandom Forest Classifier has got the best accuracy, best presicion score(the model was successful at generalazing different diseases), best f1 score. The reason why this model is succesful is, i think this data is very clear, data is distinctable between diseases. So random forest was succesful because it creates bunch of different trees so since data is seperteable these trees was succesful together."]},{"cell_type":"markdown","metadata":{"id":"xnG7h8vklXvN"},"source":["## Evaluation\n","\n","After selecting Random Forest Classifier as our base model, we have decided to improve our model by applying Hyperparameter Tuning to the model. We have 2 options to improve a model in machine learning. First one is with gathering more data and performing feature engineering. Other way is with playing parameters and peforming hyperparameter tuning. We have focused on finding better parameters for our model.\n","\n","To do this we have used GridSearchCv to train bunch of different models with different parameters, than select the best model which has the best mean test score. What GridSearchCv does is, it creates bunch of new models with the parameters we defined above, so that for the given range of values, differents models are evaluated and the best is selected and it returned the parameters of the best model.(More parameters can be tested but grid search sv was taking so much time to train so we used limited range of parameters.)"]},{"cell_type":"code","metadata":{"id":"tH_UqZtRSDFP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621945359894,"user_tz":-180,"elapsed":208908,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"0dc42406-3eb9-493b-8b76-8a205242d5d0"},"source":["from sklearn.model_selection import RepeatedStratifiedKFold\n","from sklearn.model_selection import GridSearchCV\n","\n","model = RandomForestClassifier()\n","param_grid = {'min_samples_split': [2, 5, 10],'n_estimators': [100, 200, 300],'min_samples_leaf': [1, 2, 3]}\n","# define grid search\n","cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n","grid_search = GridSearchCV(estimator=model, param_grid = param_grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\n","grid_result = grid_search.fit(X_train, y_train)\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","    print(\"%f (%f) with: %r\" % (mean, stdev, param))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Best: 0.958333 using {'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 100}\n","0.954762 (0.037946) with: {'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}\n","0.955952 (0.036519) with: {'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 200}\n","0.955952 (0.036519) with: {'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 300}\n","0.958333 (0.036981) with: {'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 100}\n","0.955952 (0.039859) with: {'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 200}\n","0.957143 (0.036187) with: {'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 300}\n","0.955952 (0.035335) with: {'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 100}\n","0.954762 (0.040125) with: {'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 200}\n","0.954762 (0.041171) with: {'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 300}\n","0.953571 (0.037058) with: {'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 100}\n","0.953571 (0.037058) with: {'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 200}\n","0.952381 (0.039484) with: {'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 300}\n","0.953571 (0.037058) with: {'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 100}\n","0.953571 (0.040353) with: {'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 200}\n","0.954762 (0.040125) with: {'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 300}\n","0.953571 (0.039286) with: {'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 100}\n","0.955952 (0.034111) with: {'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 200}\n","0.954762 (0.037946) with: {'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 300}\n","0.948810 (0.040912) with: {'min_samples_leaf': 3, 'min_samples_split': 2, 'n_estimators': 100}\n","0.953571 (0.040353) with: {'min_samples_leaf': 3, 'min_samples_split': 2, 'n_estimators': 200}\n","0.955952 (0.036519) with: {'min_samples_leaf': 3, 'min_samples_split': 2, 'n_estimators': 300}\n","0.952381 (0.033672) with: {'min_samples_leaf': 3, 'min_samples_split': 5, 'n_estimators': 100}\n","0.953571 (0.040353) with: {'min_samples_leaf': 3, 'min_samples_split': 5, 'n_estimators': 200}\n","0.954762 (0.036809) with: {'min_samples_leaf': 3, 'min_samples_split': 5, 'n_estimators': 300}\n","0.947619 (0.048562) with: {'min_samples_leaf': 3, 'min_samples_split': 10, 'n_estimators': 100}\n","0.952381 (0.041582) with: {'min_samples_leaf': 3, 'min_samples_split': 10, 'n_estimators': 200}\n","0.953571 (0.039286) with: {'min_samples_leaf': 3, 'min_samples_split': 10, 'n_estimators': 300}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cObTTrqFlgFA"},"source":["From these parameters we can see that the best model parameters was :\n","\n","Best: 0.966667 using {'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 100}\n","\n","Now lets see if hyperparameter tuning is worked for us or not. Lets create a new model with the best parameters and lets train and test this model and compare the accuracy differences between our base model.\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"h2jHDd2cjsO-","colab":{"base_uri":"https://localhost:8080/","height":518},"executionInfo":{"status":"ok","timestamp":1621945360485,"user_tz":-180,"elapsed":620,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"acc4aba9-a294-48b2-bf7e-60cdeb4abc9f"},"source":["best_forest = RandomForestClassifier(min_samples_leaf = 1, min_samples_split = 10, n_estimators = 100)\n","\n","best_forest = best_forest.fit(X_train, y_train)\n","\n","pred_best_forest = best_forest.predict(X_test)\n","\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, pred_best_forest))\n","grid_accuracy = metrics.accuracy_score(y_test, pred_best_forest)\n","\n","print(metrics.f1_score(y_test, pred_best_forest, average='micro'))\n","\n","print(metrics.classification_report(y_test, pred_best_forest, zero_division = 1))\n","\n","cm = confusion_matrix(y_test, pred_best_forest)\n","cmd = ConfusionMatrixDisplay(cm, display_labels = output_dict)\n","cmd.plot()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.9916666666666667\n","0.9916666666666667\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        82\n","           1       1.00      0.91      0.95        11\n","           2       0.95      1.00      0.98        21\n","           3       1.00      1.00      1.00         6\n","\n","    accuracy                           0.99       120\n","   macro avg       0.99      0.98      0.98       120\n","weighted avg       0.99      0.99      0.99       120\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa3c2a10150>"]},"metadata":{"tags":[]},"execution_count":59},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FUafu5Adl-sx"},"source":["As we can see this better version of random forest classifier has better presicion scores, better accuracy, better f1 score and other metrics.We can say that hyperparameter tuning has worked.\n","\n","After finding the model with best parameters, we are comparing it with the base model we have used above and we are finding the improvement between the accuracy of these two models."]},{"cell_type":"code","metadata":{"id":"xGSNoj4qkONX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621945360487,"user_tz":-180,"elapsed":47,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"679b71c1-fb0d-4a85-a28e-049c313cf52f"},"source":["print('Improvement of {:0.2f}%.'.format( 100 * (grid_accuracy - base_accuracy) / base_accuracy))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Improvement of 0.85%.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zApnGLOWmCI4"},"source":["We got some improvement. It may seem small but this is because of our data is not that big. In bigger projects this will have so much more impact on the accuracy of the model and Hyperparameter tuning will have so much impact.\n","\n","Now we have our best model, we have our selected features and their possible values. Lets convert them using pickle and send this to our front end."]},{"cell_type":"code","metadata":{"id":"QIVChjdqHTE5"},"source":["pd.to_pickle(best_forest, \"model.pickle\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"30kewyXnNscK"},"source":["sirali_selected_features = []\n","for i in selected_features.values:\n","  sirali_selected_features.append(i)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a8Mf9Dt7_in_"},"source":["pd.to_pickle(sirali_selected_features, \"sorted_features.pickle\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qTAaTXh2N324","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621945360494,"user_tz":-180,"elapsed":41,"user":{"displayName":"Ali Kayadibi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghmz5xIEgI0MnTWG4cAT6SNWblx2m9JQkquAzPvBA=s64","userId":"08452137550580731147"}},"outputId":"d674eacb-3667-448e-8045-a31acb556d0b"},"source":["selected_features_dict = {\"numbers_features\" : []}\n","\n","for i in selected_features.values:\n","  if i in features_dict.keys():\n","    selected_features_dict[i] = features_dict[i]\n","  else:\n","    selected_features_dict[\"numbers_features\"].append(i)\n","selected_features_dict"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Feature_28': array(['Every Day', '1-2 Days a Week', '3-4 Days a Week',\n","        '1-2 Days a Month'], dtype=object),\n"," 'Feature_29': array(['No Difference', 'Evenings', 'Mornings'], dtype=object),\n"," 'Feature_37': array(['No', 'Yes'], dtype=object),\n"," 'Feature_39': array(['No', 'Yes'], dtype=object),\n"," 'Feature_40': array(['No', 'Yes'], dtype=object),\n"," 'Feature_43': array(['No', 'Yes'], dtype=object),\n"," 'numbers_features': ['Feature_5', 'Feature_4', 'Feature_2', 'Feature_3']}"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"code","metadata":{"id":"LFFtRyAwQ20e"},"source":["pd.to_pickle(selected_features_dict, \"features.pickle\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gIJkDlJwOEMT"},"source":["pd.to_pickle(two_tuples, \"features_tuple.pickle\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gZt6wm-rdFZw"},"source":["pd.to_pickle(features_and_possible_values, \"feature_target.pickle\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j83tgoJH3j5-"},"source":["## References\n","\n","[1] https://www.analyticsvidhya.com/blog/2020/03/beginners-guide-random-forest-hyperparameter-tuning/\n","\n","[2] https://towardsdatascience.com/scale-standardize-or-normalize-with-scikit-learn-6ccc7d176a02\n","\n","[3] https://scikit-learn.org/stable/modules/tree.html\n","\n","[4] https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html\n","\n","[5] https://scikit-learn.org/stable/modules/svm.html\n","\n","[6] https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html\n","\n","[7] https://towardsdatascience.com/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74\n","\n","[8] https://machinelearningmastery.com/hyperparameters-for-classification-machine-learning-algorithms/\n","\n","[9] https://scikit-learn.org/stable/modules/naive_bayes.html#gaussian-naive-bayes\n","\n","[10] https://cdn-uploads.piazza.com/paste/hm1s4tgj65l5j2/8025a8503f7c52b9a99e862b38561669a7457a3b4642227b8ae9152a03f53e44/SDSP_description.pdf\n"]}]}